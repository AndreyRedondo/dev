{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","hot","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed20313e.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid'\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n        // Crear state de citas\r\n        const [ cita, actualizarCita] = useState({\r\n               mascota: '',\r\n               propietario: '',\r\n               fecha: '',\r\n               hora: '',\r\n               sintomas: ''\r\n        })\r\n\r\n        const [error, actualizarError] = useState(false)\r\n\r\n        // Funcion que se ejecuta cada vez que se escribe\r\n\r\n        const actualizarState = e =>{\r\n            actualizarCita({...cita,[e.target.name]: e.target.value})\r\n        }\r\n\r\n        // Extraer valores\r\n        const { mascota, propietario, fecha, hora, sintomas } = cita\r\n\r\n        // Cuando el usuario presiona agregar cita\r\n\r\n        const submitCita = e => {\r\n            e.preventDefault()\r\n\r\n            // Validar\r\n            if( mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n                actualizarError(true)\r\n                return;\r\n            }\r\n\r\n            // Eliminar el msj previo de error\r\n            actualizarError(false)\r\n\r\n            // Asignar un ID\r\n            cita.id = uuid()\r\n            \r\n            // Crear cita\r\n            crearCita(cita)\r\n\r\n            // Reiniciar el form\r\n            actualizarCita({\r\n                mascota: '',\r\n                propietario: '',\r\n                fecha: '',\r\n                hora: '',\r\n                sintomas: ''\r\n            })\r\n        }\r\n\r\n     \r\n    return (  \r\n        <Fragment>\r\n            <h2>Crear cita</h2>\r\n\r\n                {error ? <p className='alerta-error'>Todos los campos son obligatorios</p>\r\n                : null}\r\n            <form\r\n                onSubmit={ submitCita }\r\n            \r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type='text'\r\n                    name='mascota'\r\n                    className='u-full-width'\r\n                    placeholder='Nombre de la mascota'\r\n                    onChange={ actualizarState }\r\n                    value={ mascota }\r\n                />\r\n\r\n                <label>Nombre Dueno</label>\r\n                <input\r\n                    type='text'\r\n                    name='propietario'\r\n                    className='u-full-width'\r\n                    placeholder='Nombre dueno de la mascota'\r\n                    onChange={ actualizarState }\r\n                    value={ propietario }\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input\r\n                    type='date'\r\n                    name='fecha'\r\n                    className='u-full-width'\r\n                    onChange={ actualizarState }\r\n                    value={ fecha }\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input\r\n                    type='time'\r\n                    name='hora'\r\n                    className='u-full-width'\r\n                    onChange={ actualizarState }\r\n                    value={ hora }\r\n                />\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    name='sintomas'\r\n                    className='u-full-width'\r\n                    onChange={ actualizarState }\r\n                    value={ sintomas }\r\n                >\r\n                </textarea>\r\n\r\n                <button\r\n                    type='submit'\r\n                    className='u-full-width button-primary '\r\n                \r\n                >Agregar cita</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota:<span>{cita.mascota}</span></p>\r\n        <p>Dueno:<span>{cita.propietario}</span></p>\r\n        <p>Fecha:<span>{cita.fecha}</span></p>\r\n        <p>Hora:<span>{cita.mascota}</span></p>\r\n        <p>Sintomas:<span>{cita.sintomas}</span></p>\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => eliminarCita(cita.id)}\r\n        >Eliminar &times;</button>\r\n\r\n    </div>\r\n);\r\n \r\nexport default Cita;","import { hot } from 'react-hot-loader/root';\nimport React, { Fragment, useState, useEffect } from 'react'\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\n\nfunction App() {\n\n  // Revisa si hay citas en Local Storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales){\n    citasIniciales = '';\n  }\n\n  // Arreglo de citas\n  const [citas, guardarCitas] = useState([citasIniciales])\n\n  // Use Effect\n  useEffect ( () =>{\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    }\n  }, [citas] );\n\n  // Funcion que tome las citas actuales y agregue las nuevas\n  const crearCita = cita => {\n    guardarCitas([...citas, cita])\n\n  }\n\n  // Funcionque elimina una cita por su id\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id)\n    guardarCitas(nuevasCitas)\n  }\n\n  // Mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n\n      <div className='container'>\n        <div className='row'>\n          <div className='one-half column'>\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className='one-half column'>\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n              key={cita.id}\n              cita={cita}\n              eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n);\n    \n\n\n}\n\nexport default hot(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}